# ETAPE 0 : suivre les intructions d'installation de https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/install.html#

# ETAPE 1 : ajouter des labels à chaque image à l'aide du logicielle labelImg (https://pypi.org/project/labelImg/)
# Ensuite, chaque image aurra un fichier .xml avec tous les boxes identifiés

# ETAPE 2 : separer les images en deux groupes, un pour l'entrenement (base_structure/images/train) et l'autre pour les tests (base_structure/images/test).
# Chaque image doit avoir son fichier .xml dans le même dossie.
# Pour le probleme des pouces, le groupe de test était composé de 10% de tous les pouces.

A partir du dossier base_structure ...

# ETAPE 3 : excecuter le script ci-dessous pour faire la convertion de xml to csv

python xml_to_csv.py

# ETAPE 4 : excecuter les scripts ci-dessous pour faire la convertion de csv to record

python generate_tfrecord.py \
	--csv_input=data/train_labels.csv \
	--output_path=data/train.record \
	--image_dir=images/train/

python generate_tfrecord.py \
	--csv_input=data/test_labels.csv \
	--output_path=data/test.record \
	--image_dir=images/test/

# ETAPE 5 : 

# excecuter les scripts ci-dessous pour commencer l'entrenement

python train.py --logtostderr \
	--train_dir=training/ \
	--pipeline_config_path=training/faster_rcnn_inception_v2_coco.config

# ETAPE 6 : 

python export_inference_graph.py \
    --input_type image_tensor \
    --pipeline_config_path training/faster_rcnn_inception_v2_coco.config \
    --trained_checkpoint_prefix training/model.ckpt-200000 \
    --output_directory thumb_inference_graph

# EPATE 7 : le resultat sera dans le dossier --output_directory et peut être utiliser par les fichiers

python detection_camera.py \
	--model_name=thumb_inference_graph \
	--label_map=thumb_detection.pbtxt \
	--num_classes=2 \
	--time_period=5

python detection_images.py \
	--model_name=thumb_inference_graph \
	--label_map=thumb_detection.pbtxt \
	--num_classes=2
